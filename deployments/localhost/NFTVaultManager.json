{
  "address": "0x494c9e92aa2a44d05E1B1593D20051C735A380eF",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection_",
          "type": "address"
        }
      ],
      "name": "approveCollection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "approvedCollections",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        }
      ],
      "name": "isTokenInVault",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection_",
          "type": "address"
        }
      ],
      "name": "safeApproveCollection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x913f5d1021f1d5b1e1f5315e0b8a7e507bb39d3bbf2a0fa8b08cc10630123ebb",
  "receipt": {
    "to": null,
    "from": "0xa5033D0b590539463209E0C26609BD571Acb57EE",
    "contractAddress": "0x494c9e92aa2a44d05E1B1593D20051C735A380eF",
    "transactionIndex": 0,
    "gasUsed": "518060",
    "logsBloom": "0x
    "blockHash": "0x7725a3efa00dfc59d1b792ae9f2257ef5602b1965ca88dd553417cdc35e9bcd4",
    "transactionHash": "0x913f5d1021f1d5b1e1f5315e0b8a7e507bb39d3bbf2a0fa8b08cc10630123ebb",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2,
        "transactionHash": "0x913f5d1021f1d5b1e1f5315e0b8a7e507bb39d3bbf2a0fa8b08cc10630123ebb",
        "address": "0x494c9e92aa2a44d05E1B1593D20051C735A380eF",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a5033d0b590539463209e0c26609bd571acb57ee"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x7725a3efa00dfc59d1b792ae9f2257ef5602b1965ca88dd553417cdc35e9bcd4"
      }
    ],
    "blockNumber": 2,
    "cumulativeGasUsed": "518060",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "cfd30aabc5c00fa481c4c7d767f8d078",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection_\",\"type\":\"address\"}],\"name\":\"approveCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedCollections\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"isTokenInVault\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection_\",\"type\":\"address\"}],\"name\":\"safeApproveCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"_holdings\":{\"details\":\"map to check if a holder has a token registered over an approved collection  COLLECTION_CONTRACT_ADDRESS => NFT_ID => HOLDER_ACCOUNT_ADDRESS OR ZERO_ADDRESS\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approveCollection(address)\":{\"notice\":\"approve a collection contract\"},\"approvedCollections(address)\":{\"notice\":\"the whitelist for the NFT collection addresses accpeted\"},\"isTokenInVault(address,uint256)\":{\"notice\":\"check if the vault holds a token\"},\"safeApproveCollection(address)\":{\"notice\":\"use ERC-165 to check for IERC721 interface in the collection contract         before approve\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ethereum/NFTVaultManager.sol\":\"NFTVaultManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/ethereum/NFTVaultManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract NFTVaultManager is IERC721Receiver, Ownable {\\r\\n    /**\\r\\n     * @notice the whitelist for the NFT collection addresses accpeted\\r\\n     */\\r\\n    mapping(address => bool) public approvedCollections;\\r\\n\\r\\n    /**\\r\\n     * @dev map to check if a holder has a token registered over an approved collection\\r\\n     *\\r\\n     *  COLLECTION_CONTRACT_ADDRESS => NFT_ID => HOLDER_ACCOUNT_ADDRESS OR ZERO_ADDRESS\\r\\n     */\\r\\n    mapping(address => mapping(uint256 => address)) private _holdings;\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Receiver-onERC721Received}.\\r\\n     */\\r\\n    function onERC721Received(\\r\\n        address operator_,\\r\\n        address,\\r\\n        uint256 tokenId_,\\r\\n        bytes memory\\r\\n    ) external virtual override returns (bytes4) {\\r\\n        require(approvedCollections[msg.sender], \\\"Not approved collection\\\");\\r\\n\\r\\n        // this should be an invariant (can't receive a token that the contract is already holding)\\r\\n        assert(_holdings[msg.sender][tokenId_] == address(0));\\r\\n\\r\\n        // the sender must be the collection contract\\r\\n        _holdings[msg.sender][tokenId_] == operator_;\\r\\n\\r\\n        return this.onERC721Received.selector;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice check if the vault holds a token\\r\\n     */\\r\\n    function isTokenInVault(address collection_, uint256 tokenId_) external view returns (bool) {\\r\\n        require(approvedCollections[collection_], \\\"Not approved collection\\\");\\r\\n\\r\\n        address previousOwner = _holdings[collection_][tokenId_];\\r\\n        return previousOwner != address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice approve a collection contract\\r\\n     */\\r\\n    function approveCollection(address collection_) external onlyOwner {\\r\\n        require(!approvedCollections[msg.sender], \\\"Collection already approved\\\");\\r\\n        approvedCollections[collection_] = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice use ERC-165 to check for IERC721 interface in the collection contract\\r\\n     *         before approve\\r\\n     */\\r\\n    function safeApproveCollection(address collection_) external onlyOwner {\\r\\n        bytes4 erc721interfaceId = type(IERC721).interfaceId;\\r\\n\\r\\n        require(!approvedCollections[msg.sender], \\\"Collection already approved\\\");\\r\\n        require(\\r\\n            IERC165(collection_).supportsInterface(erc721interfaceId),\\r\\n            \\\"Address doesn't support IERC721 interface\\\"\\r\\n        );\\r\\n\\r\\n        approvedCollections[collection_] = true;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf58d41056ece041e4ef6df2f06fb59526a6bcc76cb3a41abb2dedb2da5dbe52a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6107fa8061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b146100fe578063ec07fb7414610119578063f2f4ec8f1461013c578063f2fde38b1461014f57600080fd5b8063150b7a021461008d578063428e173e146100be5780636aae5cda146100e1578063715018a6146100f6575b600080fd5b6100a061009b36600461065b565b610162565b6040516001600160e01b031990911681526020015b60405180910390f35b6100d16100cc366004610730565b610225565b60405190151581526020016100b5565b6100f46100ef36600461063a565b6102b2565b005b6100f4610363565b6000546040516001600160a01b0390911681526020016100b5565b6100d161012736600461063a565b60016020526000908152604090205460ff1681565b6100f461014a36600461063a565b610399565b6100f461015d36600461063a565b610533565b3360009081526001602052604081205460ff166101c05760405162461bcd60e51b81526020600482015260176024820152762737ba1030b8383937bb32b21031b7b63632b1ba34b7b760491b60448201526064015b60405180910390fd5b3360009081526002602090815260408083208684529091529020546001600160a01b0316156101ff57634e487b7160e01b600052600160045260246000fd5b50503360009081526002602090815260408220929091525250630a85bd0160e11b919050565b6001600160a01b03821660009081526001602052604081205460ff166102875760405162461bcd60e51b81526020600482015260176024820152762737ba1030b8383937bb32b21031b7b63632b1ba34b7b760491b60448201526064016101b7565b506001600160a01b039182166000908152600260209081526040808320938352929052205416151590565b6000546001600160a01b031633146102dc5760405162461bcd60e51b81526004016101b790610779565b3360009081526001602052604090205460ff161561033c5760405162461bcd60e51b815260206004820152601b60248201527f436f6c6c656374696f6e20616c726561647920617070726f766564000000000060448201526064016101b7565b6001600160a01b03166000908152600160208190526040909120805460ff19169091179055565b6000546001600160a01b0316331461038d5760405162461bcd60e51b81526004016101b790610779565b61039760006105ce565b565b6000546001600160a01b031633146103c35760405162461bcd60e51b81526004016101b790610779565b336000908152600160205260409020546380ac58cd60e01b9060ff161561042c5760405162461bcd60e51b815260206004820152601b60248201527f436f6c6c656374696f6e20616c726561647920617070726f766564000000000060448201526064016101b7565b6040516301ffc9a760e01b81526001600160e01b0319821660048201526001600160a01b038316906301ffc9a79060240160206040518083038186803b15801561047557600080fd5b505afa158015610489573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ad9190610759565b61050b5760405162461bcd60e51b815260206004820152602960248201527f4164647265737320646f65736e277420737570706f7274204945524337323120604482015268696e7465726661636560b81b60648201526084016101b7565b506001600160a01b03166000908152600160208190526040909120805460ff19169091179055565b6000546001600160a01b0316331461055d5760405162461bcd60e51b81526004016101b790610779565b6001600160a01b0381166105c25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101b7565b6105cb816105ce565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461063557600080fd5b919050565b60006020828403121561064b578081fd5b6106548261061e565b9392505050565b60008060008060808587031215610670578283fd5b6106798561061e565b93506106876020860161061e565b925060408501359150606085013567ffffffffffffffff808211156106aa578283fd5b818701915087601f8301126106bd578283fd5b8135818111156106cf576106cf6107ae565b604051601f8201601f19908116603f011681019083821181831017156106f7576106f76107ae565b816040528281528a602084870101111561070f578586fd5b82602086016020830137918201602001949094529598949750929550505050565b60008060408385031215610742578182fd5b61074b8361061e565b946020939093013593505050565b60006020828403121561076a578081fd5b81518015158114610654578182fd5b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220788fb299876ba023a7db7dde869f4fc7c52d748184371885a89b30c8d8651dcc64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b146100fe578063ec07fb7414610119578063f2f4ec8f1461013c578063f2fde38b1461014f57600080fd5b8063150b7a021461008d578063428e173e146100be5780636aae5cda146100e1578063715018a6146100f6575b600080fd5b6100a061009b36600461065b565b610162565b6040516001600160e01b031990911681526020015b60405180910390f35b6100d16100cc366004610730565b610225565b60405190151581526020016100b5565b6100f46100ef36600461063a565b6102b2565b005b6100f4610363565b6000546040516001600160a01b0390911681526020016100b5565b6100d161012736600461063a565b60016020526000908152604090205460ff1681565b6100f461014a36600461063a565b610399565b6100f461015d36600461063a565b610533565b3360009081526001602052604081205460ff166101c05760405162461bcd60e51b81526020600482015260176024820152762737ba1030b8383937bb32b21031b7b63632b1ba34b7b760491b60448201526064015b60405180910390fd5b3360009081526002602090815260408083208684529091529020546001600160a01b0316156101ff57634e487b7160e01b600052600160045260246000fd5b50503360009081526002602090815260408220929091525250630a85bd0160e11b919050565b6001600160a01b03821660009081526001602052604081205460ff166102875760405162461bcd60e51b81526020600482015260176024820152762737ba1030b8383937bb32b21031b7b63632b1ba34b7b760491b60448201526064016101b7565b506001600160a01b039182166000908152600260209081526040808320938352929052205416151590565b6000546001600160a01b031633146102dc5760405162461bcd60e51b81526004016101b790610779565b3360009081526001602052604090205460ff161561033c5760405162461bcd60e51b815260206004820152601b60248201527f436f6c6c656374696f6e20616c726561647920617070726f766564000000000060448201526064016101b7565b6001600160a01b03166000908152600160208190526040909120805460ff19169091179055565b6000546001600160a01b0316331461038d5760405162461bcd60e51b81526004016101b790610779565b61039760006105ce565b565b6000546001600160a01b031633146103c35760405162461bcd60e51b81526004016101b790610779565b336000908152600160205260409020546380ac58cd60e01b9060ff161561042c5760405162461bcd60e51b815260206004820152601b60248201527f436f6c6c656374696f6e20616c726561647920617070726f766564000000000060448201526064016101b7565b6040516301ffc9a760e01b81526001600160e01b0319821660048201526001600160a01b038316906301ffc9a79060240160206040518083038186803b15801561047557600080fd5b505afa158015610489573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ad9190610759565b61050b5760405162461bcd60e51b815260206004820152602960248201527f4164647265737320646f65736e277420737570706f7274204945524337323120604482015268696e7465726661636560b81b60648201526084016101b7565b506001600160a01b03166000908152600160208190526040909120805460ff19169091179055565b6000546001600160a01b0316331461055d5760405162461bcd60e51b81526004016101b790610779565b6001600160a01b0381166105c25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101b7565b6105cb816105ce565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461063557600080fd5b919050565b60006020828403121561064b578081fd5b6106548261061e565b9392505050565b60008060008060808587031215610670578283fd5b6106798561061e565b93506106876020860161061e565b925060408501359150606085013567ffffffffffffffff808211156106aa578283fd5b818701915087601f8301126106bd578283fd5b8135818111156106cf576106cf6107ae565b604051601f8201601f19908116603f011681019083821181831017156106f7576106f76107ae565b816040528281528a602084870101111561070f578586fd5b82602086016020830137918201602001949094529598949750929550505050565b60008060408385031215610742578182fd5b61074b8361061e565b946020939093013593505050565b60006020828403121561076a578081fd5b81518015158114610654578182fd5b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220788fb299876ba023a7db7dde869f4fc7c52d748184371885a89b30c8d8651dcc64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "_holdings": {
        "details": "map to check if a holder has a token registered over an approved collection  COLLECTION_CONTRACT_ADDRESS => NFT_ID => HOLDER_ACCOUNT_ADDRESS OR ZERO_ADDRESS"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approveCollection(address)": {
        "notice": "approve a collection contract"
      },
      "approvedCollections(address)": {
        "notice": "the whitelist for the NFT collection addresses accpeted"
      },
      "isTokenInVault(address,uint256)": {
        "notice": "check if the vault holds a token"
      },
      "safeApproveCollection(address)": {
        "notice": "use ERC-165 to check for IERC721 interface in the collection contract         before approve"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/ethereum/NFTVaultManager.sol:NFTVaultManager",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2302,
        "contract": "contracts/ethereum/NFTVaultManager.sol:NFTVaultManager",
        "label": "approvedCollections",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2309,
        "contract": "contracts/ethereum/NFTVaultManager.sol:NFTVaultManager",
        "label": "_holdings",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_address)"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}